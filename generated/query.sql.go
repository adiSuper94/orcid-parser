// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package queries

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const getArchiveFile = `-- name: GetArchiveFile :one
select id, name from archive_files where name = $1 limit 1
`

func (q *Queries) GetArchiveFile(ctx context.Context, name string) (ArchiveFile, error) {
	row := q.db.QueryRow(ctx, getArchiveFile, name)
	var i ArchiveFile
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getEmployment = `-- name: GetEmployment :one
select id, org_id, orcid_id, dept_name, role_title, start_date, end_date from employment where id = $1
`

func (q *Queries) GetEmployment(ctx context.Context, empID int64) (Employment, error) {
	row := q.db.QueryRow(ctx, getEmployment, empID)
	var i Employment
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.OrcidID,
		&i.DeptName,
		&i.RoleTitle,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getOrg = `-- name: GetOrg :one
select id, grid_id, ror_id, fundref_id, lei_id, city, region, country, name from org where
  (grid_id is not null and grid_id = $1) or
  (ror_id is not null and ror_id = $2) or
  -- (fundref_id is not null and fundref_id = @fundref_id) or
  (lei_id is not null and lei_id = $3) or
  (name is not null and country is not null and name = $4 and country = $5)
`

type GetOrgParams struct {
	GridID  pgtype.Text
	RorID   pgtype.Text
	LeiID   pgtype.Text
	Name    pgtype.Text
	Country pgtype.Text
}

func (q *Queries) GetOrg(ctx context.Context, arg GetOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, getOrg,
		arg.GridID,
		arg.RorID,
		arg.LeiID,
		arg.Name,
		arg.Country,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.GridID,
		&i.RorID,
		&i.FundrefID,
		&i.LeiID,
		&i.City,
		&i.Region,
		&i.Country,
		&i.Name,
	)
	return i, err
}

const insertArchive = `-- name: InsertArchive :one
insert into archive_files(name) values($1) returning id, name
`

func (q *Queries) InsertArchive(ctx context.Context, name string) (ArchiveFile, error) {
	row := q.db.QueryRow(ctx, insertArchive, name)
	var i ArchiveFile
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const insertDir = `-- name: InsertDir :one
insert into dir(archive_file_id, name) values($1, $2) returning id, archive_file_id, name
`

type InsertDirParams struct {
	ArchiveFileID int64
	Name          pgtype.Text
}

func (q *Queries) InsertDir(ctx context.Context, arg InsertDirParams) (Dir, error) {
	row := q.db.QueryRow(ctx, insertDir, arg.ArchiveFileID, arg.Name)
	var i Dir
	err := row.Scan(&i.ID, &i.ArchiveFileID, &i.Name)
	return i, err
}

const insertEmpoymentRecord = `-- name: InsertEmpoymentRecord :one
insert into employment(id, orcid_id, org_id, dept_name, role_title, start_date, end_date)
  values($1, $2, $3, $4, $5, $6, $7) returning id, org_id, orcid_id, dept_name, role_title, start_date, end_date
`

type InsertEmpoymentRecordParams struct {
	ID        int64
	OrcidID   string
	OrgID     int64
	DeptName  pgtype.Text
	RoleTitle pgtype.Text
	StartDate *time.Time
	EndDate   *time.Time
}

func (q *Queries) InsertEmpoymentRecord(ctx context.Context, arg InsertEmpoymentRecordParams) (Employment, error) {
	row := q.db.QueryRow(ctx, insertEmpoymentRecord,
		arg.ID,
		arg.OrcidID,
		arg.OrgID,
		arg.DeptName,
		arg.RoleTitle,
		arg.StartDate,
		arg.EndDate,
	)
	var i Employment
	err := row.Scan(
		&i.ID,
		&i.OrgID,
		&i.OrcidID,
		&i.DeptName,
		&i.RoleTitle,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const insertOrg = `-- name: InsertOrg :one
insert into org(grid_id, ror_id, lei_id, city, region, country, name)
  values($1, $2, $3, $4, $5, $6, $7) returning id, grid_id, ror_id, fundref_id, lei_id, city, region, country, name
`

type InsertOrgParams struct {
	GridID  pgtype.Text
	RorID   pgtype.Text
	LeiID   pgtype.Text
	City    pgtype.Text
	Region  pgtype.Text
	Country pgtype.Text
	Name    pgtype.Text
}

func (q *Queries) InsertOrg(ctx context.Context, arg InsertOrgParams) (Org, error) {
	row := q.db.QueryRow(ctx, insertOrg,
		arg.GridID,
		arg.RorID,
		arg.LeiID,
		arg.City,
		arg.Region,
		arg.Country,
		arg.Name,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.GridID,
		&i.RorID,
		&i.FundrefID,
		&i.LeiID,
		&i.City,
		&i.Region,
		&i.Country,
		&i.Name,
	)
	return i, err
}

const insertPerson = `-- name: InsertPerson :one
insert into person(orcid_id, given_name, family_name) values($1, $2, $3) returning orcid_id, given_name, family_name
`

type InsertPersonParams struct {
	OrcidID    string
	GivenName  pgtype.Text
	FamilyName pgtype.Text
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, insertPerson, arg.OrcidID, arg.GivenName, arg.FamilyName)
	var i Person
	err := row.Scan(&i.OrcidID, &i.GivenName, &i.FamilyName)
	return i, err
}

const updateOrgIds = `-- name: UpdateOrgIds :one
update org set grid_id = $1, ror_id = $2, lei_id = $3 where id = $4 returning id, grid_id, ror_id, fundref_id, lei_id, city, region, country, name
`

type UpdateOrgIdsParams struct {
	GridID pgtype.Text
	RorID  pgtype.Text
	LeiID  pgtype.Text
	ID     int64
}

func (q *Queries) UpdateOrgIds(ctx context.Context, arg UpdateOrgIdsParams) (Org, error) {
	row := q.db.QueryRow(ctx, updateOrgIds,
		arg.GridID,
		arg.RorID,
		arg.LeiID,
		arg.ID,
	)
	var i Org
	err := row.Scan(
		&i.ID,
		&i.GridID,
		&i.RorID,
		&i.FundrefID,
		&i.LeiID,
		&i.City,
		&i.Region,
		&i.Country,
		&i.Name,
	)
	return i, err
}
